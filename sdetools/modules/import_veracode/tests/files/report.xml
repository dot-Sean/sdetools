<?xml version="1.0" encoding="ISO-8859-1"?>

<detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.1" app_name="WebGoat" app_id="39624" first_build_submitted_date="2012-07-23 17:20:12 UTC" version="5.4" build_id="60062" submitter="Geoff Whittington" platform="Java" assurance_level="3" business_criticality="3" generation_date="2012-08-28 17:02:50 UTC" veracode_level="VL1" total_flaws="309" flaws_not_mitigated="309" teams="" life_cycle_stage="External or Beta Testing" planned_deployment_date="" last_update_time="2012-07-23 17:28:54 UTC" is_latest_build="true" policy_name="Veracode Recommended Medium" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="">
   <static-analysis rating="C" score="52" submitted_date="2012-07-23 16:40:15 UTC" published_date="2012-07-23 17:28:40 UTC" next_scan_due="2012-10-23 17:28:40 UTC" analysis_size_bytes="5696613">
      <modules>
         <module name="WebGoat-5.4.war" compiler="JAVAC_6" os="Java J2SE 6" architecture="JVM" loc="193412" score="52" numflawssev0="1" numflawssev1="0" numflawssev2="0" numflawssev3="1" numflawssev4="1" numflawssev5="0"/>
      </modules>
   </static-analysis>
   <severity level="5">
      <category categoryid="18" categoryname="OS Command Injection" pcirelated="true">
         <desc>
            <para text="OS command injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct and execute a system command.  This allows an attacker to either alter the command executed by the application or append additional commands.  The command is typically executed with the privileges of the executing process and gives an attacker a privilege or capability that he would not otherwise have."/>
         </desc>
         <recommendations>
            <para text="Careful handling of all untrusted data is critical in preventing OS command injection attacks.   Using one or more of the following techniques provides defense-in-depth and minimizes the likelihood of an vulnerability.">
               <bulletitem text="If possible, use library calls rather than external processes to recreate the desired functionality."/>
               <bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Select safe API routines.  Some APIs that execute system commands take an array of strings as input rather than a single string, which protects against some forms of command injection by ensuring that a user-supplied argument cannot be interpreted as part of the command."/>
            </para>
         </recommendations>
      </category>
   </severity>
   <severity level="4">
      <category categoryid="19" categoryname="SQL Injection" pcirelated="true">
         <desc>
            <para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
               <bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
               <bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded (%xx), HTML-encoded (&amp;#xx;), or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
               <bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
            </para>
         </recommendations>
         <cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" pcirelated="true" owasp="810" sans="801">
            <description>
               <text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
            </description>
            <staticflaws>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="140" module="WebGoat-5.4.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable arrSQL. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterValues.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References:
CWE (http://cwe.mitre.org/data/definitions/89.html)
OWASP (http://www.owasp.org/index.php/SQL_injection)
WASC (http://webappsec.pbworks.com/SQL-Injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2012-07-23 17:28:40 UTC" affects_policy_compliance="true" sourcefile="BackDoors.java" line="148" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.BackDoors" functionprototype="apache.ecs.Element concept1(session.WebSession)" functionrelativelocation="81">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="3">
      <category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="true">
         <desc>
            <para text="Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
            <para text="XSS vulnerabilities can be either persistent or transient (often referred to as stored and reflected, respectively).  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
               <bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code (a common technique in Web 2.0 applications), additional restrictions may be necessary beyond simple HTML encoding."/>
               <bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
            </para>
         </recommendations>
         <cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" pcirelated="true" owasp="811" sans="79">
            <description>
               <text text="This call contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="293" module="WebGoat-5.4.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable employee.getStartDate(). The tainted data originated from earlier calls to java.sql.preparedstatement.executequery, javax.servlet.servletrequest.getparameter, java.sql.statement.executequery, and javax.servlet.servletrequest.getparametervalues. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References:
CWE (http://cwe.mitre.org/data/definitions/79.html)
OWASP (http://www.owasp.org/index.php/XSS)
WASC (http://webappsec.pbworks.com/Cross-Site-Scripting)

" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="ViewProfile.jsp" line="52" sourcefilepath="/lessons/CrossSiteScripting/" scope="com.veracode.compiledjsp.xWebGoat54war.lessons.CrossSiteScripting.ViewProfile_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="29">
                  <exploitability_adjustments>
                     <exploitability_adjustment score_adjustment="1">
                        <note>This source of the tainted data is an external web request.</note>
                     </exploitability_adjustment>
                  </exploitability_adjustments>
               </flaw>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="2">
   </severity>
   <severity level="1"/>
   <severity level="0">
      <category categoryid="30" categoryname="Potential Backdoor" pcirelated="false">
         <desc>
            <para text="Application backdoors are modifications to programs that are designed to bypass security mechanisms or inject malicious functionality.  Backdoors are often inserted by rogue developers with legitimate access to the source code or distribution binaries.  Backdoors can take many forms, such as hard-coded credentials, &quot;easter egg&quot; style functionality, rootkits, or time bombs, among others."/>
         </desc>
         <recommendations>
            <para text="Investigate all potential backdoors thoroughly to ensure there is no undesirable functionality. If the backdoors are real, eliminate them, and initiate a broader effort to inspect the entire codebase for malicious code. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker."/>
         </recommendations>
         <cwe cweid="5" cwename="Reliance on Security Through Obscurity" pcirelated="false">
            <description>
               <text text="The strength of a security mechanism depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to allow the mechanism to be compromised."/>
            </description>
            <staticflaws>
               <flaw severity="0" categoryname="Reliance on Security Through Obscurity" count="1" issueid="206" module="WebGoat-5.4.war" type="javax.crypto.Cipher.doFinal" description="The application decrypts or decodes embedded data. Encryption or encoding of embedded data is typically done to obfuscate the true intention of the data and to hinder reverse engineering efforts. javax.crypto.Cipher.doFinal

This message is purely information and does not represent a flaw in the code. Therefore, no remediation is necessary.

References:
CWE (http://cwe.mitre.org/data/definitions/656.html)

" note="" cweid="193" remediationeffort="3" exploitLevel="0" categoryid="30" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" sourcefile="Encoding.java" line="335" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.Encoding" functionprototype="java.lang.String decryptString(java.lang.String, java.lang.String)" functionrelativelocation="80"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <flaw-status new="4" reopen="0" open="0" fixed="0" total="4" not_mitigated="4" sev-1-change="0" sev-2-change="22" sev-3-change="1" sev-4-change="2" sev-5-change="1"/>
</detailedreport>
