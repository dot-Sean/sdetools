import re
import random
from mock import patch


def patch_sde_mocks(path_to_alm_connector):
    patch('%s.AlmConnector.sde_connect' % path_to_alm_connector, mock_sde_connect).start()
    patch('%s.AlmConnector.is_sde_connected' % path_to_alm_connector, mock_is_sde_connected).start()
    patch('%s.AlmConnector.sde_get_tasks' % path_to_alm_connector, mock_sde_get_tasks).start()
    patch('%s.AlmConnector.sde_get_task' % path_to_alm_connector, mock_sde_get_task).start()
    patch('%s.AlmConnector.sde_update_task_status' % path_to_alm_connector, mock_sde_update_task_status).start()
    patch('%s.AlmConnector._add_note' % path_to_alm_connector, mock_add_note).start()


def mock_sde_connect(self):
    pass


def mock_is_sde_connected(self):
    return True


def mock_sde_get_tasks(self):
    task_list = [
        generate_sde_task(priority=10),
        generate_sde_task(priority=9),
        generate_sde_task(priority=7),
        generate_sde_task(priority=5),
        generate_sde_task(priority=3),
        generate_sde_task(priority=1)
    ]

    return task_list


def mock_sde_get_task(self, id):
    task_id = re.search('[0-9]*$', id).group(0)

    return generate_sde_task(_task_number=int(task_id))


def mock_sde_update_task_status(self, task, status):
    pass


def generate_sde_task(priority=10, project_id=1000, _task_number=None):
        if _task_number is not None:
            task_number = _task_number
        else:
            task_number = random.randint(1, 999999999)

        task_id = 'T%d' % task_number
        title = '%s: Test task' % task_id

        return {
            'status': 'TODO',
            'contextrulesets': [],
            'timestamp': 1343386079,
            'note_count': 0,
            'implementations': [],
            'phase': 'requirements',
            'id': '%s-%s' % (project_id, task_id),
            'categories': ['Authentication'],
            'priority': priority,
            'weakness': {
                'content': 'This is a test problem generated' +
                ' by a test script',
                'title': 'W9999: Test Weakness',
                'id': 'W9999',
                'cwe_id': 0
            },
            'title': title,
            'url': 'https://example.sdelements.com/library/tasks/T99999/',
            'age': 'current',
            'project': project_id,
            'assigned_to': ['bob@example.com'],
            'content': 'This is a test task generated by a test script'
        }


def mock_add_note(self, task_id, note_msg, filename, status):
    pass
