import re
import random


def mock_sde_connect(self):
    pass


def mock_is_sde_connected(self):
    return True


def mock_sde_get_tasks(self):
    task_list = [
        generate_sde_task(10),
        generate_sde_task(9),
        generate_sde_task(7),
        generate_sde_task(5),
        generate_sde_task(3),
        generate_sde_task(1)
    ]

    return task_list


def mock_sde_get_task(self, id):
    task_id = re.search('[0-9]*$', id).group(0)

    return generate_sde_task(int(task_id))


def mock_sde_update_task_status(self, task, status):
    pass


def mock_sde_get_task_content(self, task):
    return 'Task content'


def generate_sde_task(priority=10, project_id=1000):
        random_id = 'T%d' % random.randint(1, 999999999)
        random_title = '%s: Test task' % random_id
        return {
            'status': 'TODO',
            'contextrulesets': [],
            'timestamp': 1343386079,
            'note_count': 0,
            'implementations': [],
            'phase': 'requirements',
            'id': random_id,
            'categories': ['Authentication'],
            'priority': priority,
            'weakness': {
                'content': 'This is a test problem generated' +
                ' by a test script',
                'title': 'W9999: Test Weakness',
                'id': 'W9999',
                'cwe_id': 0
            },
            'title': random_title,
            'url': 'https://example.sdelements.com/library/tasks/T99999/',
            'age': 'current',
            'project': project_id,
            'assigned_to': ['bob@example.com'],
            'content': 'This is a test task generated by a test script'
        }


def mock_add_note(self, task_id, note_msg, filename, status):
    pass
